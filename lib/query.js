// Generated by CoffeeScript 1.12.5
(function() {
  var Promise, Query, _, bindDomain, stream;

  _ = require('lodash');

  bindDomain = require('./util').bindDomain;

  Promise = require('bluebird');

  stream = require('stream');

  Query = (function() {
    function Query(model) {
      this._model = model;
      this._name = model._name;
      this._connection = model._connection;
      this._adapter = model._connection._adapter;
      this._ifs = [];
      this._current_if = true;
      this._conditions = [];
      this._includes = [];
      this._options = {
        orders: [],
        conditions_of_group: [],
        lean: model.lean_query
      };
    }

    Query.prototype.find = function(id) {
      if (!this._current_if) {
        return this;
      }
      if (Array.isArray(id)) {
        this._id = _.uniq(id);
        this._find_single_id = false;
      } else {
        this._id = id;
        this._find_single_id = true;
      }
      return this;
    };

    Query.prototype.findPreserve = function(ids) {
      if (!this._current_if) {
        return this;
      }
      this._id = _.uniq(ids);
      this._find_single_id = false;
      this._preserve_order_ids = ids;
      return this;
    };

    Query.prototype.near = function(target) {
      if (!this._current_if) {
        return this;
      }
      this._options.near = target;
      return this;
    };

    Query.prototype._addCondition = function(condition) {
      var keys;
      if (this._options.group_fields) {
        keys = Object.keys(condition);
        if (keys.length === 1 && this._options.group_fields.hasOwnProperty(keys[0])) {
          this._options.conditions_of_group.push(condition);
          return;
        }
      }
      return this._conditions.push(condition);
    };

    Query.prototype.where = function(condition) {
      if (!this._current_if) {
        return this;
      }
      if (Array.isArray(condition)) {
        condition.forEach((function(_this) {
          return function(cond) {
            return _this._addCondition(cond);
          };
        })(this));
      } else if (condition != null) {
        this._addCondition(condition);
      }
      return this;
    };

    Query.prototype.select = function(columns) {
      var intermediate_paths, schema_columns, select, select_raw;
      if (!this._current_if) {
        return this;
      }
      this._options.select = null;
      this._options.select_raw = null;
      if (typeof columns === 'string') {
        schema_columns = Object.keys(this._model._schema);
        intermediate_paths = this._model._intermediate_paths;
        select = [];
        select_raw = [];
        columns.split(/\s+/).forEach(function(column) {
          if (schema_columns.indexOf(column) >= 0) {
            select.push(column);
            return select_raw.push(column);
          } else if (intermediate_paths[column]) {
            select_raw.push(column);
            column += '.';
            return schema_columns.forEach(function(sc) {
              if (sc.indexOf(column) === 0) {
                return select.push(sc);
              }
            });
          }
        });
        this._options.select = select;
        this._options.select_raw = select_raw;
      }
      return this;
    };

    Query.prototype.order = function(orders) {
      var avaliable_columns;
      if (!this._current_if) {
        return this;
      }
      if (typeof orders === 'string') {
        avaliable_columns = ['id'];
        [].push.apply(avaliable_columns, Object.keys(this._model._schema));
        if (this._options.group_fields) {
          [].push.apply(avaliable_columns, Object.keys(this._options.group_fields));
        }
        orders.split(/\s+/).forEach((function(_this) {
          return function(order) {
            var asc;
            asc = true;
            if (order[0] === '-') {
              asc = false;
              order = order.slice(1);
            }
            if (avaliable_columns.indexOf(order) >= 0) {
              return _this._options.orders.push(asc ? order : '-' + order);
            }
          };
        })(this));
      }
      return this;
    };

    Query.prototype.group = function(group_by, fields) {
      var columns, schema_columns;
      if (!this._current_if) {
        return this;
      }
      this._options.group_by = null;
      schema_columns = Object.keys(this._model._schema);
      if (typeof group_by === 'string') {
        columns = group_by.split(/\s+/).filter(function(column) {
          return schema_columns.indexOf(column) >= 0;
        });
        this._options.group_by = columns;
      }
      this._options.group_fields = fields;
      return this;
    };

    Query.prototype.one = function() {
      if (!this._current_if) {
        return this;
      }
      this._options.limit = 1;
      this._options.one = true;
      return this;
    };

    Query.prototype.limit = function(limit) {
      if (!this._current_if) {
        return this;
      }
      this._options.limit = limit;
      return this;
    };

    Query.prototype.skip = function(skip) {
      if (!this._current_if) {
        return this;
      }
      this._options.skip = skip;
      return this;
    };

    Query.prototype.lean = function(lean) {
      if (lean == null) {
        lean = true;
      }
      if (!this._current_if) {
        return this;
      }
      this._options.lean = lean;
      return this;
    };

    Query.prototype["if"] = function(condition) {
      this._ifs.push(condition);
      this._current_if && (this._current_if = condition);
      return this;
    };

    Query.prototype.endif = function() {
      var condition, i, len, ref;
      this._ifs.pop();
      this._current_if = true;
      ref = this._ifs;
      for (i = 0, len = ref.length; i < len; i++) {
        condition = ref[i];
        this._current_if && (this._current_if = condition);
      }
      return this;
    };

    Query.prototype.cache = function(options) {
      if (!this._current_if) {
        return this;
      }
      this._options.cache = options;
      return this;
    };

    Query.prototype.include = function(column, select) {
      if (!this._current_if) {
        return this;
      }
      this._includes.push({
        column: column,
        select: select
      });
      return this;
    };

    Query.prototype._exec = function(options) {
      var expected_count;
      if (this._find_single_id && this._conditions.length === 0) {
        if (!(options != null ? options.skip_log : void 0)) {
          this._connection.log(this._name, 'find by id', {
            id: this._id,
            options: this._options
          });
        }
        if (!this._id) {
          return Promise.reject(new Error('not found'));
        }
        return this._adapter.findByIdAsync(this._name, this._id, this._options)["catch"](function(error) {
          return Promise.reject(new Error('not found'));
        }).then(function(record) {
          if (!record) {
            return Promise.reject(new Error('not found'));
          }
          return record;
        });
      }
      expected_count = void 0;
      if (this._id || this._find_single_id) {
        if (Array.isArray(this._id)) {
          if (this._id.length === 0) {
            return Promise.resolve([]);
          }
          this._conditions.push({
            id: {
              $in: this._id
            }
          });
          expected_count = this._id.length;
        } else {
          this._conditions.push({
            id: this._id
          });
          expected_count = 1;
        }
      }
      if (!(options != null ? options.skip_log : void 0)) {
        this._connection.log(this._name, 'find', {
          conditions: this._conditions,
          options: this._options
        });
      }
      return this._adapter.findAsync(this._name, this._conditions, this._options).then((function(_this) {
        return function(records) {
          if (expected_count != null) {
            if (records.length !== expected_count) {
              return Promise.reject(new Error('not found'));
            }
          }
          if (_this._preserve_order_ids) {
            records = _this._preserve_order_ids.map(function(id) {
              var i, len, record;
              for (i = 0, len = records.length; i < len; i++) {
                record = records[i];
                if (record.id === id) {
                  return record;
                }
              }
            });
          }
          if (_this._options.one) {
            if (records.length > 1) {
              return Promise.reject(new Error('unknown error'));
            }
            return Promise.resolve(records.length === 1 ? records[0] : null);
          } else {
            return Promise.resolve(records);
          }
        };
      })(this));
    };

    Query.prototype._execAndInclude = function(options) {
      return this._exec(options).then((function(_this) {
        return function(records) {
          var promises;
          promises = _this._includes.map(function(include) {
            return _this._connection.fetchAssociated(records, include.column, include.select, {
              model: _this._model,
              lean: _this._options.lean
            });
          });
          return Promise.all(promises).then(function() {
            return records;
          });
        };
      })(this));
    };

    Query.prototype.exec = function(options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      return this._model._checkReady().then((function(_this) {
        return function() {
          var cache_key, cache_options;
          if ((cache_options = _this._options.cache) && (cache_key = cache_options.key)) {
            return _this._model._loadFromCache(cache_key, cache_options.refresh)["catch"](function(error) {
              return _this._execAndInclude(options).then(function(records) {
                return _this._model._saveToCache(cache_key, cache_options.ttl, records).then(function() {
                  return records;
                });
              });
            });
          } else {
            return _this._execAndInclude(options);
          }
        };
      })(this)).nodeify(bindDomain(callback));
    };

    Query.prototype.stream = function() {
      var transformer;
      transformer = new stream.Transform({
        objectMode: true
      });
      transformer._transform = function(chunk, encoding, callback) {
        this.push(chunk);
        return callback();
      };
      this._model._checkReady().then((function(_this) {
        return function() {
          return _this._adapter.stream(_this._name, _this._conditions, _this._options).on('error', function(error) {
            return transformer.emit('error', error);
          }).pipe(transformer);
        };
      })(this));
      return transformer;
    };

    Query.prototype.explain = function(callback) {
      this._options.cache = null;
      this._options.explain = true;
      this._includes = [];
      return this.exec({
        skip_log: true
      }, callback);
    };

    Query.prototype.then = function(fulfilled, rejected) {
      return this.exec().then(fulfilled, rejected);
    };

    Query.prototype.count = function(callback) {
      return this._model._checkReady().then((function(_this) {
        return function() {
          if (_this._id || _this._find_single_id) {
            _this._conditions.push({
              id: _this._id
            });
            delete _this._id;
          }
          return _this._adapter.countAsync(_this._name, _this._conditions, _this._options);
        };
      })(this)).nodeify(bindDomain(callback));
    };

    Query.prototype._validateAndBuildSaveData = function(errors, data, updates, path, object) {
      var column, error, model, property, results, schema, temp;
      model = this._model;
      schema = model._schema;
      results = [];
      for (column in object) {
        property = schema[path + column];
        if (property) {
          try {
            model._validateColumn(updates, path + column, property, true);
          } catch (error1) {
            error = error1;
            errors.push(error);
          }
          results.push(model._buildSaveDataColumn(data, updates, path + column, property, true));
        } else if (!object[column] && model._intermediate_paths[column]) {
          column += '.';
          temp = {};
          Object.keys(schema).forEach(function(sc) {
            if (sc.indexOf(column) === 0) {
              return temp[sc.substr(column.length)] = null;
            }
          });
          results.push(this._validateAndBuildSaveData(errors, data, updates, path + column, temp));
        } else if (typeof object[column] === 'object') {
          results.push(this._validateAndBuildSaveData(errors, data, updates, path + column + '.', object[column]));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Query.prototype.update = function(updates, callback) {
      return this._model._checkReady().then((function(_this) {
        return function() {
          var data, errors;
          errors = [];
          data = {};
          _this._validateAndBuildSaveData(errors, data, updates, '', updates);
          if (errors.length > 0) {
            return Promise.reject(new Error(errors.join(',')));
          }
          if (_this._id || _this._find_single_id) {
            _this._conditions.push({
              id: _this._id
            });
            delete _this._id;
          }
          _this._connection.log(_this._name, 'update', {
            data: data,
            conditions: _this._conditions,
            options: _this._options
          });
          return _this._adapter.updatePartialAsync(_this._name, data, _this._conditions, _this._options);
        };
      })(this)).nodeify(bindDomain(callback));
    };

    Query.prototype.upsert = function(updates, callback) {
      return this._model._checkReady().then((function(_this) {
        return function() {
          var data, errors;
          errors = [];
          data = {};
          _this._validateAndBuildSaveData(errors, data, updates, '', updates);
          if (errors.length > 0) {
            return Promise.reject(new Error(errors.join(',')));
          }
          if (_this._id || _this._find_single_id) {
            _this._conditions.push({
              id: _this._id
            });
            delete _this._id;
          }
          _this._connection.log(_this._name, 'upsert', {
            data: data,
            conditions: _this._conditions,
            options: _this._options
          });
          return _this._adapter.upsertAsync(_this._name, data, _this._conditions, _this._options);
        };
      })(this)).nodeify(bindDomain(callback));
    };

    Query.prototype._doIntegrityActions = function(integrities, ids) {
      var promises;
      promises = integrities.map((function(_this) {
        return function(integrity) {
          if (integrity.type === 'parent_nullify') {
            return integrity.child.update(_.zipObject([integrity.column], [null]), _.zipObject([integrity.column], [ids]));
          } else if (integrity.type === 'parent_restrict') {
            return integrity.child.count(_.zipObject([integrity.column], [ids])).then(function(count) {
              if (count > 0) {
                return Promise.reject(new Error('rejected'));
              }
            });
          } else if (integrity.type === 'parent_delete') {
            return integrity.child["delete"](_.zipObject([integrity.column], [ids]));
          }
        };
      })(this));
      return Promise.all(promises);
    };

    Query.prototype._doArchiveAndIntegrity = function(options) {
      var integrities, need_archive, need_child_archive, need_integrity, query;
      need_archive = this._model.archive;
      integrities = this._model._integrities.filter(function(integrity) {
        return integrity.type.substr(0, 7) === 'parent_';
      });
      need_child_archive = integrities.some((function(_this) {
        return function(integrity) {
          return integrity.child.archive;
        };
      })(this));
      need_integrity = need_child_archive || (integrities.length > 0 && !this._adapter.native_integrity);
      if (!need_archive && !need_integrity) {
        return Promise.resolve();
      }
      query = this._model.where(this._conditions);
      if (!need_archive) {
        query.select('');
      }
      return query.exec({
        skip_log: options != null ? options.skip_log : void 0
      }).then((function(_this) {
        return function(records) {
          var archive_records;
          if (!need_archive) {
            return Promise.resolve(records);
          }
          archive_records = records.map(function(record) {
            return {
              model: _this._name,
              data: record
            };
          });
          return _this._connection.models['_Archive'].createBulk(archive_records).then(function() {
            return Promise.resolve(records);
          });
        };
      })(this)).then((function(_this) {
        return function(records) {
          var ids;
          if (!need_integrity) {
            return Promise.resolve();
          }
          if (records.length === 0) {
            return Promise.resolve();
          }
          ids = records.map(function(record) {
            return record.id;
          });
          return _this._doIntegrityActions(integrities, ids);
        };
      })(this));
    };

    Query.prototype["delete"] = function(options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      return this._model._checkReady().then((function(_this) {
        return function() {
          if (_this._id || _this._find_single_id) {
            _this._conditions.push({
              id: _this._id
            });
            delete _this._id;
          }
          if (!(options != null ? options.skip_log : void 0)) {
            _this._connection.log(_this._name, 'delete', {
              conditions: _this._conditions
            });
          }
          return _this._doArchiveAndIntegrity(options).then(function() {
            return _this._adapter.deleteAsync(_this._name, _this._conditions);
          });
        };
      })(this)).nodeify(bindDomain(callback));
    };

    return Query;

  })();

  module.exports = Query;

}).call(this);
