// Generated by CoffeeScript 1.12.5
(function() {
  var ModelPersistence, Promise, _, inflector, util;

  _ = require('lodash');

  inflector = require('../util/inflector');

  Promise = require('bluebird');

  util = require('../util');

  ModelPersistence = (function() {
    function ModelPersistence() {}

    ModelPersistence.create = function(data, options, callback) {
      if (typeof data === 'function') {
        callback = data;
        data = {};
        options = {};
      } else if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      return this._checkReady().then((function(_this) {
        return function() {
          return _this.build(data).save(options);
        };
      })(this)).nodeify(util.bindDomain(callback));
    };

    ModelPersistence.createBulk = function(data, callback) {
      return this._checkReady().then((function(_this) {
        return function() {
          var promises, records;
          if (!Array.isArray(data)) {
            return Promise.reject(new Error('data is not an array'));
          }
          if (data.length === 0) {
            return Promise.resolve([]);
          }
          records = data.map(function(item) {
            return _this.build(item);
          });
          promises = records.map(function(record) {
            return record.validate();
          });
          return Promise.all(promises).then(function() {
            records.forEach(function(record) {
              return record._runCallbacks('save', 'before');
            });
            records.forEach(function(record) {
              return record._runCallbacks('create', 'before');
            });
            return _this._createBulk(records)["finally"](function() {
              records.forEach(function(record) {
                return record._runCallbacks('create', 'after');
              });
              return records.forEach(function(record) {
                return record._runCallbacks('save', 'after');
              });
            });
          });
        };
      })(this)).nodeify(util.bindDomain(callback));
    };

    ModelPersistence._buildSaveDataColumn = function(data, model, column, property, allow_null) {
      var adapter, parts, value;
      adapter = this._adapter;
      parts = property._parts;
      value = util.getPropertyOfPath(model, parts);
      value = adapter.valueToDB(value, column, property);
      if (allow_null || value !== void 0) {
        if (adapter.support_nested) {
          return util.setPropertyOfPath(data, parts, value);
        } else {
          return data[property._dbname] = value;
        }
      }
    };

    ModelPersistence.prototype._buildSaveData = function() {
      var column, ctor, data, property, schema;
      data = {};
      ctor = this.constructor;
      schema = ctor._schema;
      for (column in schema) {
        property = schema[column];
        ctor._buildSaveDataColumn(data, this, column, property);
      }
      if (this.id != null) {
        data.id = ctor._adapter.idToDB(this.id);
      }
      return data;
    };

    ModelPersistence.prototype._create = function(options) {
      var ctor, data, e;
      try {
        data = this._buildSaveData();
      } catch (error1) {
        e = error1;
        return Promise.reject(e);
      }
      ctor = this.constructor;
      if (!(options != null ? options.skip_log : void 0)) {
        ctor._connection.log(ctor._name, 'create', data);
      }
      return ctor._adapter.createAsync(ctor._name, data).then((function(_this) {
        return function(id) {
          var foreign_key, promises;
          Object.defineProperty(_this, 'id', {
            configurable: false,
            enumerable: true,
            writable: false,
            value: id
          });
          foreign_key = inflector.foreign_key(ctor._name);
          promises = Object.keys(ctor._associations).map(function(column) {
            var sub_promises;
            sub_promises = (_this['__cache_' + column] || []).map(function(sub) {
              sub[foreign_key] = id;
              return sub.save();
            });
            return Promise.all(sub_promises);
          });
          return Promise.all(promises)["finally"](function() {
            return _this._prev_attributes = {};
          })["catch"](function() {});
        };
      })(this));
    };

    ModelPersistence._createBulk = function(records) {
      var data_array, error;
      error = void 0;
      data_array = records.map(function(record) {
        var data, e;
        try {
          data = record._buildSaveData();
        } catch (error1) {
          e = error1;
          error = e;
        }
        return data;
      });
      if (error) {
        return Promise.reject(error);
      }
      this._connection.log(this._name, 'createBulk', data_array);
      return this._adapter.createBulkAsync(this._name, data_array).then(function(ids) {
        records.forEach(function(record, i) {
          return Object.defineProperty(record, 'id', {
            configurable: false,
            enumerable: true,
            writable: false,
            value: ids[i]
          });
        });
        return Promise.resolve(records);
      });
    };

    ModelPersistence.prototype._update = function(options) {
      var adapter, ctor, data, e, path, schema;
      ctor = this.constructor;
      if (ctor.dirty_tracking) {
        if (!this.isDirty()) {
          return Promise.resolve();
        }
        data = {};
        adapter = ctor._adapter;
        schema = ctor._schema;
        try {
          for (path in this._prev_attributes) {
            ctor._buildSaveDataColumn(data, this._attributes, path, schema[path], true);
          }
        } catch (error1) {
          e = error1;
          return Promise.reject(e);
        }
        if (!(options != null ? options.skip_log : void 0)) {
          ctor._connection.log(ctor._name, 'update', data);
        }
        return adapter.updatePartialAsync(ctor._name, data, {
          id: this.id
        }, {}).then((function(_this) {
          return function() {
            return _this._prev_attributes = {};
          };
        })(this));
      } else {
        try {
          data = this._buildSaveData();
        } catch (error1) {
          e = error1;
          return Promise.reject(e);
        }
        if (!(options != null ? options.skip_log : void 0)) {
          ctor._connection.log(ctor._name, 'update', data);
        }
        return ctor._adapter.updateAsync(ctor._name, data).then((function(_this) {
          return function() {
            return _this._prev_attributes = {};
          };
        })(this));
      }
    };

    ModelPersistence.prototype.save = function(options, callback) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      return this.constructor._checkReady().then((function(_this) {
        return function() {
          if ((options != null ? options.validate : void 0) !== false) {
            return _this.validate().then(function() {
              return _this.save(_.extend({}, options, {
                validate: false
              }));
            });
          }
          _this._runCallbacks('save', 'before');
          if (_this.id) {
            _this._runCallbacks('update', 'before');
            return _this._update(options)["finally"](function() {
              _this._runCallbacks('update', 'after');
              return _this._runCallbacks('save', 'after');
            });
          } else {
            _this._runCallbacks('create', 'before');
            return _this._create(options)["finally"](function() {
              _this._runCallbacks('create', 'after');
              return _this._runCallbacks('save', 'after');
            });
          }
        };
      })(this)).then((function(_this) {
        return function() {
          return Promise.resolve(_this);
        };
      })(this)).nodeify(util.bindDomain(callback));
    };

    return ModelPersistence;

  })();

  module.exports = ModelPersistence;

}).call(this);
