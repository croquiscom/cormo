// Generated by CoffeeScript 1.12.5
(function() {
  var ModelCallback;

  ModelCallback = (function() {
    function ModelCallback() {}

    ModelCallback.afterInitialize = function(method) {
      return this.addCallback('after', 'initialize', method);
    };

    ModelCallback.afterFind = function(method) {
      return this.addCallback('after', 'find', method);
    };

    ModelCallback.beforeSave = function(method) {
      return this.addCallback('before', 'save', method);
    };

    ModelCallback.afterSave = function(method) {
      return this.addCallback('after', 'save', method);
    };

    ModelCallback.beforeCreate = function(method) {
      return this.addCallback('before', 'create', method);
    };

    ModelCallback.afterCreate = function(method) {
      return this.addCallback('after', 'create', method);
    };

    ModelCallback.beforeUpdate = function(method) {
      return this.addCallback('before', 'update', method);
    };

    ModelCallback.afterUpdate = function(method) {
      return this.addCallback('after', 'update', method);
    };

    ModelCallback.beforeDestroy = function(method) {
      return this.addCallback('before', 'destroy', method);
    };

    ModelCallback.afterDestroy = function(method) {
      return this.addCallback('after', 'destroy', method);
    };

    ModelCallback.beforeValidate = function(method) {
      return this.addCallback('before', 'validate', method);
    };

    ModelCallback.afterValidate = function(method) {
      return this.addCallback('after', 'validate', method);
    };

    ModelCallback.addCallback = function(type, name, method) {
      var callbacks, callbacks_map;
      this._checkConnection();
      if (!(type === 'before' || type === 'after') || !name) {
        return;
      }
      callbacks_map = this._callbacks_map || (this._callbacks_map = {});
      callbacks = callbacks_map[name] || (callbacks_map[name] = []);
      return callbacks.push({
        type: type,
        method: method
      });
    };

    ModelCallback.prototype._runCallbacks = function(name, type) {
      var callbacks, ref;
      callbacks = (ref = this.constructor._callbacks_map) != null ? ref[name] : void 0;
      callbacks = callbacks != null ? callbacks.filter(function(callback) {
        return callback.type === type;
      }) : void 0;
      return callbacks != null ? callbacks.forEach((function(_this) {
        return function(callback) {
          var method;
          method = callback.method;
          if (typeof method === 'string') {
            if (!_this[method]) {
              throw new Error("The method '" + method + "' doesn't exist");
            }
            method = _this[method];
          }
          if (typeof method !== 'function') {
            throw new Error("Cannot execute method");
          }
          return method.call(_this);
        };
      })(this)) : void 0;
    };

    return ModelCallback;

  })();

  module.exports = ModelCallback;

}).call(this);
