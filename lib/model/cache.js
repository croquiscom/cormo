// Generated by CoffeeScript 2.3.1
var ModelCacheMixin, Promise, tableize;

Promise = require('bluebird');

tableize = require('../util/inflector').tableize;

//#
// Model cache
// @namespace model
ModelCacheMixin = function(Base) {
  return class extends Base {
    static _loadFromCache(key, refresh) {
      if (refresh) {
        return Promise.reject(new Error('error'));
      }
      return this._connection._connectRedisCache().then((redis) => {
        key = 'CC.' + tableize(this._name) + ':' + key;
        return new Promise(function(resolve, reject) {
          return redis.get(key, function(error, value) {
            if (error) {
              return reject(error);
            }
            return resolve(value);
          });
        });
      }).then(function(value) {
        if (value == null) {
          return Promise.reject(new Error('error'));
        }
        return Promise.resolve(JSON.parse(value));
      });
    }

    static _saveToCache(key, ttl, data) {
      return this._connection._connectRedisCache().then((redis) => {
        key = 'CC.' + tableize(this._name) + ':' + key;
        return new Promise(function(resolve, reject) {
          return redis.setex(key, ttl, JSON.stringify(data), function(error) {
            if (error) {
              return reject(error);
            }
            return resolve();
          });
        });
      });
    }

    static removeCache(key, callback) {
      return this._connection._connectRedisCache().then((redis) => {
        key = 'CC.' + tableize(this._name) + ':' + key;
        return new Promise(function(resolve, reject) {
          return redis.del(key, function(error, count) {
            return resolve();
          });
        });
      }).nodeify(callback);
    }

  };
};

module.exports = ModelCacheMixin;
