// Generated by CoffeeScript 1.12.5
(function() {
  var ModelCache, Promise, bindDomain, tableize;

  bindDomain = require('../util').bindDomain;

  Promise = require('bluebird');

  tableize = require('../util/inflector').tableize;

  ModelCache = (function() {
    function ModelCache() {}

    ModelCache._loadFromCache = function(key, refresh) {
      if (refresh) {
        return Promise.reject(new Error('error'));
      }
      return this._connection._connectRedisCache().then((function(_this) {
        return function(redis) {
          key = 'CC.' + tableize(_this._name) + ':' + key;
          return new Promise(function(resolve, reject) {
            return redis.get(key, function(error, value) {
              if (error) {
                return reject(error);
              }
              return resolve(value);
            });
          });
        };
      })(this)).then(function(value) {
        if (value == null) {
          return Promise.reject(new Error('error'));
        }
        return Promise.resolve(JSON.parse(value));
      });
    };

    ModelCache._saveToCache = function(key, ttl, data) {
      return this._connection._connectRedisCache().then((function(_this) {
        return function(redis) {
          key = 'CC.' + tableize(_this._name) + ':' + key;
          return new Promise(function(resolve, reject) {
            return redis.setex(key, ttl, JSON.stringify(data), function(error) {
              if (error) {
                return reject(error);
              }
              return resolve();
            });
          });
        };
      })(this));
    };

    ModelCache.removeCache = function(key, callback) {
      return this._connection._connectRedisCache().then((function(_this) {
        return function(redis) {
          key = 'CC.' + tableize(_this._name) + ':' + key;
          return new Promise(function(resolve, reject) {
            return redis.del(key, function(error, count) {
              return resolve();
            });
          });
        };
      })(this)).nodeify(bindDomain(callback));
    };

    return ModelCache;

  })();

  module.exports = ModelCache;

}).call(this);
