// Generated by CoffeeScript 2.3.1
var ModelQueryMixin, Query;

Query = require('../query');

//#
// Model query
// @namespace model
ModelQueryMixin = function(Base) {
  return class extends Base {
    static _createQueryAndRun(criteria, data, callback) {
      var query;
      query = new Query(this);
      query[criteria](data);
      if (typeof callback === 'function') {
        query.exec(callback);
      }
      return query;
    }

    static _createOptionalQueryAndRun(criteria, data, callback) {
      if (typeof data === 'function') {
        return this._createQueryAndRun(criteria, null, data);
      } else {
        return this._createQueryAndRun(criteria, data, callback);
      }
    }

    //#
    // Creates q query object
    static query() {
      return new Query(this);
    }

    //#
    // Finds a record by id
    // @param {RecordID|Array<RecordID>} id
    // @param {Function} [callback]
    // @param {Error} callback.error
    // @param {Model|Array<Model>} callback.record
    // @return {Query}
    // @throws {Error('not found')}
    static find(id, callback) {
      return this._createQueryAndRun('find', id, callback);
    }

    //#
    // Finds records by ids while preserving order.
    // @param {Array<RecordID>} ids
    // @param {Function} [callback]
    // @param {Error} callback.error
    // @param {Array<Model>} callback.records
    // @return {Query}
    // @throws {Error('not found')}
    static findPreserve(ids, callback) {
      return this._createQueryAndRun('findPreserve', ids, callback);
    }

    //#
    // Finds records by conditions
    // @param {Object} [condition]
    // @param {Function} [callback]
    // @param {Error} callback.error
    // @param {Array<Model>} callback.records
    // @return {Query}
    static where(condition, callback) {
      return this._createOptionalQueryAndRun('where', condition, callback);
    }

    //#
    // Selects columns for result
    // @param {String} [columns]
    // @param {Function} [callback]
    // @param {Error} callback.error
    // @param {Array<Model>} callback.records
    // @return {Query}
    static select(columns, callback) {
      return this._createOptionalQueryAndRun('select', columns, callback);
    }

    //#
    // Specifies orders of result
    // @param {String} [orders]
    // @param {Function} [callback]
    // @param {Error} callback.error
    // @param {Array<Model>} callback.records
    // @return {Query}
    static order(orders, callback) {
      return this._createOptionalQueryAndRun('order', orders, callback);
    }

    //#
    // Groups result records
    // @param {String} group_by
    // @param {Object} fields
    // @param {Function} [callback]
    // @param {Error} callback.error
    // @param {Array<Object>} callback.records
    // @return {Query}
    static group(group_by, fields, callback) {
      var query;
      query = new Query(this);
      query.group(group_by, fields);
      if (typeof callback === 'function') {
        query.exec(callback);
      }
      return query;
    }

    //#
    // Counts records by conditions
    // @param {Object} [condition]
    // @return {Number}
    // @promise
    // @nodejscallback
    static count(condition, callback) {
      if (typeof condition === 'function') {
        callback = condition;
        condition = null;
      }
      return new Query(this).where(condition).count().nodeify(callback);
    }

    //#
    // Updates some fields of records that match conditions
    // @param {Object} updates
    // @param {Object} [condition]
    // @return {Number}
    // @promise
    // @nodejscallback
    static update(updates, condition, callback) {
      if (typeof condition === 'function') {
        callback = condition;
        condition = null;
      }
      return new Query(this).where(condition).update(updates).nodeify(callback);
    }

    //#
    // Deletes records by conditions
    // @param {Object} [condition]
    // @return {Number}
    // @promise
    // @nodejscallback
    static delete(condition, callback) {
      if (typeof condition === 'function') {
        callback = condition;
        condition = null;
      }
      return new Query(this).where(condition).delete().nodeify(callback);
    }

  };
};

module.exports = ModelQueryMixin;
