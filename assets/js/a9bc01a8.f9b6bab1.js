"use strict";(self.webpackChunkcormo_doc=self.webpackChunkcormo_doc||[]).push([[58],{3074:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=r(5893),a=r(1151);const i={id:"validation",title:"Validation"},t=void 0,l={id:"validation",title:"Validation",description:"CORMO validates fields basically based on types.",source:"@site/docs/validation.md",sourceDirName:".",slug:"/validation",permalink:"/cormo/docs/validation",draft:!1,unlisted:!1,editUrl:"https://github.com/croquiscom/cormo/tree/main/doc/docs/validation.md",tags:[],version:"current",frontMatter:{id:"validation",title:"Validation"},sidebar:"docs",previous:{title:"Miscellaneous",permalink:"/cormo/docs/miscellaneous"}},d={},s=[];function c(e){const n={code:"code",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"CORMO validates fields basically based on types."}),"\n",(0,o.jsx)(n.p,{children:"If a field is invalid, [[#BaseModel::save]] or [[#Query::update]] will return errors like \"'<column name>' is not an integer\".\nIf two or more fields are invalid, all errors are returned as a comma seperated string."}),"\n",(0,o.jsx)(n.p,{children:"If you want custom validations, add a validator using [[#BaseModel.addValidator]].\nIf a record is invalid, throw an error, or return false or an error string in the validator."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-coffeescript",children:"class User extends cormo.BaseModel\n  @column 'name', String\n  @column 'age', Number\n  @column 'email', String\n\n  @addValidator (record) ->\n    if record.age < 18\n      return 'too young'\n\n  @addValidator (record) ->\n    if record.email and not /^\\w+@.+$/.test record.email\n      throw new Error 'invalid email'\n    return true\n\nUser.create name: 'John Doe', age: 10, email: 'invalid', (error, user) ->\n  # error.message will be 'invalid email,too young' or 'too young,invalid email'\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"var User = connection.model('User', {\n  name: String,\n  age: Number,\n  email: String,\n});\n\nUser.addValidator(function (record) {\n  if (record.age < 18) {\n    return 'too young';\n  }\n});\n\nUser.addValidator(function (record) {\n  if (record.email && !/^\\w+@.+$/.test(record.email)) {\n    throw new Error('invalid email');\n  }\n  return true;\n});\n\nUser.create({ name: 'John Doe', age: 10, email: 'invalid' }, function (error, user) {\n  // error.message will be 'invalid email,too young' or 'too young,invalid email'\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Custom validators are called only when using [[#BaseModel::save]]."})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>t});var o=r(7294);const a={},i=o.createContext(a);function t(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);