"use strict";(self.webpackChunkcormo_doc=self.webpackChunkcormo_doc||[]).push([[508],{4045:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var t=o(5893),s=o(1151);const c={id:"define-connection",title:"Define Connection"},i=void 0,a={id:"define-connection",title:"Define Connection",description:"Before define models, you should create a Connection to the database.",source:"@site/docs/define-connection.md",sourceDirName:".",slug:"/define-connection",permalink:"/cormo/docs/define-connection",draft:!1,unlisted:!1,editUrl:"https://github.com/croquiscom/cormo/tree/main/packages/doc/docs/define-connection.md",tags:[],version:"current",frontMatter:{id:"define-connection",title:"Define Connection"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/cormo/docs/getting-started"},next:{title:"Define Models",permalink:"/cormo/docs/define-models"}},r={},l=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Before define models, you should create a ",(0,t.jsx)(n.a,{href:"/cormo/api/cormo/classes/connection.html",children:"Connection"})," to the database."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import * as cormo from 'cormo';\n\nconst connection = new cormo.MySQLConnection({ database: 'test' });\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can see allowed settings for each database system at\n",(0,t.jsx)(n.a,{href:"/cormo/api/cormo/interfaces/mysqlconnectionsettings.html",children:"MySQLConnectionSettings"}),", ",(0,t.jsx)(n.a,{href:"/cormo/api/cormo/interfaces/mongodbconnectionsettings.html",children:"MongoDBConnectionSettings"}),", ",(0,t.jsx)(n.a,{href:"/cormo/api/cormo/interfaces/sqlite3connectionsettings.html",children:"SQLite3ConnectionSettings"})," and ",(0,t.jsx)(n.a,{href:"/cormo/api/cormo/interfaces/postgresqlconnectionsettings.html",children:"PostgreSQLConnectionSettings"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You must install a driver(",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/mysql2",children:"mysql2"})," or ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/mysql",children:"mysql"})," for MySQL. ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/mongodb",children:"mongodb"})," for MongoDB. ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/sqlite3",children:"sqlite3"})," for SQLite3. ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/pg",children:"pg"})," for PostgreSQL.) for the database system. Otherwise you will see an error like ",(0,t.jsx)(n.code,{children:"Install mysql module to use this adapter"})," and process will be terminated."]}),"\n",(0,t.jsxs)(n.p,{children:["If you want to select different database system at runtime according to the environment, use ",(0,t.jsx)(n.a,{href:"/cormo/api/cormo/classes/connection.html",children:"Connection"})," class directly."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let Config;\nif (process.env.NODE_ENV === 'test') {\n  Config = {\n    database_type: 'sqlite3',\n    database_settings: {\n      database: __dirname + '/test.sqlite3',\n    },\n  };\n} else {\n  Config = {\n    database_type: 'mysql',\n    database_settings: {\n      host: 'db.example.com',\n      database: 'cormo',\n    },\n  };\n}\nconst connection = new cormo.Connection(Config.database_type, Config.database_settings);\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you define models, they will be connected the last Connection instance automatically. If you don't want this behavior (e.g use multiple connections), set is_default to false."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const mysql = new cormo.MySQLConnection({ database: 'test', is_default: false });\nconst mongodb = new cormo.MongoDBConnection({ database: 'test', is_default: false });\n\n@cormo.Model({ connection: mongodb })\nclass User extends cormo.BaseModel {\n  @cormo.Column(String)\n  public name?: string | null;\n\n  @cormo.Column(Number)\n  public age?: number | null;\n}\n\n@cormo.Model({ connection: mysql })\nclass Post extends cormo.BaseModel {\n  @cormo.Column(String)\n  public title?: string | null;\n\n  @cormo.Column(String)\n  public body?: string | null;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The Connection instance will connect the database server automatically without any method call."})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>a,a:()=>i});var t=o(7294);const s={},c=t.createContext(s);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);