"use strict";(self.webpackChunkcormo_doc=self.webpackChunkcormo_doc||[]).push([[854],{3558:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var n=r(5893),d=r(1151);const i={id:"query",title:"Query"},t=void 0,c={id:"query",title:"Query",description:"To query, create a query object using BaseModel.query first.",source:"@site/docs/query.md",sourceDirName:".",slug:"/query",permalink:"/cormo/docs/query",draft:!1,unlisted:!1,editUrl:"https://github.com/croquiscom/cormo/tree/main/packages/doc/docs/query.md",tags:[],version:"current",frontMatter:{id:"query",title:"Query"},sidebar:"docs",previous:{title:"Create Records",permalink:"/cormo/docs/create-records"},next:{title:"Aggregation",permalink:"/cormo/docs/aggregation"}},l={},a=[{value:"Filter",id:"filter",level:2},{value:"Conditional activation",id:"conditional-activation",level:3},{value:"Retrieve records",id:"retrieve-records",level:2},{value:"Request only one record",id:"request-only-one-record",level:3},{value:"Select single column",id:"select-single-column",level:3},{value:"Stream the result",id:"stream-the-result",level:3},{value:"Count records",id:"count-records",level:2},{value:"Update records",id:"update-records",level:2},{value:"Delete records",id:"delete-records",level:2}];function o(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,d.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["To query, create a query object using ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/basemodel.html#query",children:"BaseModel.query"})," first.\nThen build up a query by chaining methods,\nand run a query by ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#exec",children:"Query#exec"}),",\n",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#count",children:"Query#count"}),",\n",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#update",children:"Query#update"}),",\nor ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#delete",children:"Query#delete"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/basemodel.html",children:"BaseModel"})," class has some methods that borrowed from ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html",children:"Query"})," to run simple queries easily."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"const users = await User.query().where(\\{ age: 27 }).exec();\n\n// or\n\nconst users = await User.where(\\{ age: 27 }).exec();\n"})}),"\n",(0,n.jsx)(s.h2,{id:"filter",children:"Filter"}),"\n",(0,n.jsxs)(s.p,{children:["You can select records with ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#where",children:"Query#where"})," or ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#find",children:"Query#find"}),".\n",(0,n.jsx)(s.code,{children:"where"}),"'s criteria is similar to the MongoDB's.\nTwo or more ",(0,n.jsx)(s.code,{children:"where"}),"s mean a logical and."]}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Description"}),(0,n.jsx)("th",{children:"CORMO"}),(0,n.jsx)("th",{children:"SQL"}),(0,n.jsx)("th",{children:"MongoDB"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Equal"}),(0,n.jsx)("td",{children:"User.where({ age: 27 })"}),(0,n.jsx)("td",{children:"SELECT * FROM users WHERE age=27"}),(0,n.jsx)("td",{children:"db.users.find({ age: 27 })"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"4",children:"Logical and"}),(0,n.jsx)("td",{children:"{ name: 'John Doe', age: 27 }"}),(0,n.jsx)("td",{rowspan:"4",children:"name='John Doe' AND age=27"}),(0,n.jsx)("td",{rowspan:"4",children:"{ name: 'John Doe', age: 27 }"})]}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{children:".where({name: 'John Doe'}).where({age: 27})"})}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{children:"{ $and: [ { name: 'John Doe' }, { age: 27 } ] }"})}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{children:"[ { name: 'John Doe' }, { age: 27 } ]"})}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Logical or"}),(0,n.jsx)("td",{children:"{ $or: [ { name: 'John Doe' }, { age: 27 } ] }"}),(0,n.jsx)("td",{children:"name='John Doe' OR age=27"}),(0,n.jsx)("td",{children:"{ $or: [ { name: 'John Doe' }, { age: 27 } ] }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Comparison ($lt, $gt, $lte, $gte)"}),(0,n.jsx)("td",{children:"[ { age: { $gt: 30 } }, { age: { $lte: 45 } } ]"}),(0,n.jsx)("td",{children:"age>30 AND age<=45"}),(0,n.jsx)("td",{children:"{ $and: [ { age: { $gt: 30 } }, { age: { $lte: 45 } } ] }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"2",children:"Containing some text in case insensitive"}),(0,n.jsx)("td",{children:"{ name: { $contains: 'smi' } }"}),(0,n.jsx)("td",{children:"name LIKE '%smi%'"}),(0,n.jsx)("td",{children:"{ name: /smi/i }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"{ name: { $contains: ['smi', 'doe'] } }"}),(0,n.jsx)("td",{children:"name LIKE '%smi%' OR name LIKE '%doe%'"}),(0,n.jsx)("td",{children:"{ name: { $in: [/smi/i, /doe/i] } }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Starts with some text in case insensitive"}),(0,n.jsx)("td",{children:"{ name: { $startswith: 'smi' } }"}),(0,n.jsx)("td",{children:"name LIKE 'smi%'"}),(0,n.jsx)("td",{children:"{ name: /^smi/i }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Ends with some text in case insensitive"}),(0,n.jsx)("td",{children:"{ name: { $endswith: 'smi' } }"}),(0,n.jsx)("td",{children:"name LIKE '%smi'"}),(0,n.jsx)("td",{children:"{ name: /smi$/i }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"2",children:"Regular expression"}),(0,n.jsx)("td",{children:"{ name: /smi/ }"}),(0,n.jsx)("td",{children:"name REGEXP 'smi'"}),(0,n.jsx)("td",{children:"{ name: /smi/i }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"{ name: /smi|doe/ }"}),(0,n.jsx)("td",{children:"name REGEXP 'smi|doe'"}),(0,n.jsx)("td",{children:"{ name: /smi|doe/i }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"2",children:"Matches any of an array"}),(0,n.jsx)("td",{children:"{ age: { $in: [ 10, 20, 30 ] } }"}),(0,n.jsx)("td",{rowspan:"2",children:"age IN (10,20,30)"}),(0,n.jsx)("td",{rowspan:"2",children:"{ age: { $in: [ 10, 20, 30 ] } }"})]}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{children:"{ age: [ 10, 20, 30 ] }"})}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{rowspan:"7",children:"Logical not"}),(0,n.jsx)("td",{children:"{ age: { $not: 27 } }"}),(0,n.jsx)("td",{children:"NOT (age=27) OR age IS NULL"}),(0,n.jsx)("td",{children:"{ age: { $ne: 27 } }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"{ age: { $not: { $lt: 27 } } }"}),(0,n.jsx)("td",{children:"NOT (age<27) OR age IS NULL"}),(0,n.jsx)("td",{children:"{ age: { $not: { $lt: 27 } } }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"{ name: { $not: { $contains: 'smi' } } }"}),(0,n.jsx)("td",{children:"NOT (name LIKE '%smi%') OR name IS NULL"}),(0,n.jsx)("td",{children:"{ name: { $not: /smi/i } }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"{ name: { $not: { $contains: ['smi', 'doe'] } } }"}),(0,n.jsx)("td",{children:"NOT (name LIKE '%smi%' OR name LIKE '%doe%') OR name IS NULL"}),(0,n.jsx)("td",{children:"{ name: { $nin: [/smi/i, /doe/i] } }"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"{ age: { $not: { $in: [ 10, 20, 30 ] } } }"}),(0,n.jsx)("td",{rowspan:"2",children:"NOT (age IN (10,20,30)) OR age IS NULL"}),(0,n.jsx)("td",{rowspan:"2",children:"{ age: { $nin: [10,20,30] } }"})]}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{children:"{ age: { $not: [ 10, 20, 30 ] } }"})}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"{ name: { $not: null } }"}),(0,n.jsx)("td",{children:"NOT name IS NULL"}),(0,n.jsx)("td",{children:"{ age: { $ne: null } }"})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:["If you want find records based on the identifier, use ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#find",children:"Query#find"})," that accepts an ID or an array of IDs.\nIt is logically same to ",(0,n.jsx)(s.code,{children:".where(\\{ id: <given ID or array of IDs> })"}),", but ",(0,n.jsx)(s.code,{children:"find"})," throws an exception when records are not found while ",(0,n.jsx)(s.code,{children:"where"})," does not."]}),"\n",(0,n.jsx)(s.h3,{id:"conditional-activation",children:"Conditional activation"}),"\n",(0,n.jsxs)(s.p,{children:["If you want to apply different criteria in one query chain, you can use ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#if",children:"Query#if"})," and ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#endif",children:"Query#endif"}),".\nYou can use them to simplify query statements."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"async function getOldUsers(options: \\{ limit?: number; columns?: string[] }) \\{\n  const query = User.query();\n  query.where(\\{ age: \\{ $gt: 30 } });\n  if (options.limit) \\{\n    query.limit(options.limit);\n  }\n  if (options.columns) \\{\n    query.select(options.columns as any);\n  }\n  return await query.exec();\n}\n\n// wiil be\n\nasync function getOldUsers(options: \\{ limit?: number; columns?: string[] }) \\{\n  return await User.query()\n    .where(\\{ age: \\{ $gt: 30 } })\n    .if(options.limit != null)\n    .limit(options.limit)\n    .endif()\n    .if(options.columns != null)\n    .select(options.columns as any)\n    .endif()\n    .exec();\n}\n"})}),"\n",(0,n.jsx)(s.h2,{id:"retrieve-records",children:"Retrieve records"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#exec",children:"Query#exec"})," retrieves records."]}),"\n",(0,n.jsxs)(s.p,{children:["It normally returns an array of Model instances.\nBut if you use ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#find",children:"Query#find"})," with a single ID, it will return a single Model instance."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"const user = await User.find(1).exec();\nconst users = await User.find([1, 2, 3]).exec();\n"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html",children:"Query"})," has the ",(0,n.jsx)(s.code,{children:"then"})," method (i.e. thenable) which calls ",(0,n.jsx)(s.code,{children:"exec"})," internally. So you can omit to call ",(0,n.jsx)(s.code,{children:"exec"}),", just ",(0,n.jsx)(s.code,{children:"await"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"const users = await User.where(\\{ age: 30 });\n"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#find",children:"Query#find"})," will throw an error if any ID is not found.\n",(0,n.jsx)(s.code,{children:"find"})," does not preserve given order, so if you want to get same ordered array, use ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#findpreserve",children:"Query#findPreserve"})," instead."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"const users = await User.findPreserve([2, 1, 2, 3]).exec();\n// users[0].id is 2, users[1].id is 1, users[2].id is 2 and users[3].id is 3\n"})}),"\n",(0,n.jsx)(s.p,{children:"You can give some options for retrieving."}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"Description"}),(0,n.jsx)("th",{children:"CORMO"}),(0,n.jsx)("th",{children:"SQL"}),(0,n.jsx)("th",{children:"MongoDB"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Projection"}),(0,n.jsx)("td",{children:"User.select(['id', 'name', 'age'])"}),(0,n.jsx)("td",{children:"SELECT id,name,age FROM users"}),(0,n.jsx)("td",{children:"db.users.find({}, { name: 1, age: 1 })"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Sort"}),(0,n.jsx)("td",{children:"User.order('age -name')"}),(0,n.jsx)("td",{children:"SELECT * FROM users ORDER BY age ASC, name DESC"}),(0,n.jsx)("td",{children:"db.users.find().sort({ age: 1, name: -1 })"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Limit"}),(0,n.jsx)("td",{children:"User.query().limit(3)"}),(0,n.jsx)("td",{children:"SELECT * FROM users LIMIT 3"}),(0,n.jsx)("td",{children:"db.users.find().limit(3)"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"Skip"}),(0,n.jsx)("td",{children:"User.query().skip(3)"}),(0,n.jsx)("td",{children:"SELECT * FROM users LIMIT 2147483647 OFFSET 3"}),(0,n.jsx)("td",{children:"db.users.find().skip(3)"})]})]})]}),"\n",(0,n.jsx)(s.h3,{id:"request-only-one-record",children:"Request only one record"}),"\n",(0,n.jsxs)(s.p,{children:["If you know that there will be only one result (e.x. query on unique column), ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#one",children:"Query#one"})," will be helpful.\nIt makes a query return a single instance (or null) instead of array of instances."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"const user = await User.where(\\{ age: 27 }).one();\n"})}),"\n",(0,n.jsx)(s.h3,{id:"select-single-column",children:"Select single column"}),"\n",(0,n.jsxs)(s.p,{children:["If you interest only a column, you can use ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#selectsingle",children:"Query#selectSingle"}),".\nThen the query object will return a value or an array of values instead of Model instances."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"const user_ids = await User.where(\\{ age: 27 }).selectSingle('id');\nconst user_name = await User.find(1).selectSingle('name');\n"})}),"\n",(0,n.jsx)(s.h3,{id:"stream-the-result",children:"Stream the result"}),"\n",(0,n.jsx)(s.p,{children:"If the result has huge records, you can use Node.js stream API to reduce memory usage."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"let count = 0;\nawait new Promise((resolve, reject) => \\{\n  const stream = User.where(\\{ age: 27 }).stream();\n  stream.on('data', function (user) \\{\n    count++;\n  });\n  stream.on('end', function () \\{\n    resolve();\n  });\n});\n"})}),"\n",(0,n.jsx)(s.h2,{id:"count-records",children:"Count records"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#count",children:"Query#count"})," returns the count of records."]}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"CORMO"}),(0,n.jsx)("th",{children:"SQL"}),(0,n.jsx)("th",{children:"MongoDB"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"User.count()"}),(0,n.jsx)("td",{children:"SELECT COUNT(*) FROM users"}),(0,n.jsx)("td",{children:"db.users.count()"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"User.count({age: 27})"}),(0,n.jsx)("td",{rowspan:"2",children:"SELECT COUNT(*) FROM users WHERE age=27"}),(0,n.jsx)("td",{rowspan:"2",children:"db.users.find({age: 27}).count()"})]}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{children:"User.where({age: 27}).count()"})})]})]}),"\n",(0,n.jsx)(s.h2,{id:"update-records",children:"Update records"}),"\n",(0,n.jsxs)(s.p,{children:["To update records, ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/basemodel.html#save",children:"BaseModel#save"})," and ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#update",children:"Query#update"})," are provided."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/basemodel.html#save",children:"BaseModel#save"})," is used to update a single retrieved record."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"const user = await User.find(1);\nuser.age = 30;\nawait user.save();\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Meanwhile, ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#update",children:"Query#update"})," updates filtered records."]}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"CORMO"}),(0,n.jsx)("th",{children:"SQL"}),(0,n.jsx)("th",{children:"MongoDB"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"User.update({ age: 10 }, { age: 27 })"}),(0,n.jsx)("td",{rowspan:"2",children:"UPDATE users SET age=10 WHERE age=27"}),(0,n.jsx)("td",{rowspan:"2",children:"db.users.update({age: 27}, {$set: {age: 10}}, {multi: true})"})]}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{children:"User.where({ age: 27 }).update({ age:10 })"})}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"User.find(1).update({ age: 10 })"}),(0,n.jsx)("td",{children:"UPDATE users SET age=10 WHERE id=1"}),(0,n.jsx)("td",{children:"db.users.update({_id: 1}, {$set: {age: 10}}, {multi: true})"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"User.find(2).update({ age: { $inc: 3 } })"}),(0,n.jsx)("td",{children:"UPDATE users SET age=age+3 WHERE id=2"}),(0,n.jsx)("td",{children:"db.users.update({_id: 2}, {$inc: {age: 3}}, {multi: true})"})]})]})]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#update",children:"Query#update"})," may be faster because only update command will be sent to the database system.\nInstead you will not get modified objects and update callbacks will not be called."]}),"\n",(0,n.jsx)(s.p,{children:"Choose one according to your needs."}),"\n",(0,n.jsxs)(s.p,{children:["In CORMO, Active Record pattern (i.e. ",(0,n.jsx)(s.code,{children:"BaseModel#save"}),") is not battle-tested. So use it with caution."]}),"\n",(0,n.jsx)(s.h2,{id:"delete-records",children:"Delete records"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#delete",children:"Query#delete"})," or ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/basemodel.html#destroy",children:"BaseModel#destroy"})," deletes some records."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/basemodel.html#destroy",children:"BaseModel#destroy"})," deletes one record by ID similar to ",(0,n.jsx)(s.code,{children:"BaseModel#save"}),". And ",(0,n.jsx)(s.a,{href:"/cormo/api/cormo/classes/query.html#delete",children:"Query#delete"})," deletes filtered records like ",(0,n.jsx)(s.code,{children:"Query#update"}),"."]}),"\n",(0,n.jsxs)("table",{class:"table table-bordered",children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:"CORMO"}),(0,n.jsx)("th",{children:"SQL"}),(0,n.jsx)("th",{children:"MongoDB"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"User.delete({age: 27})"}),(0,n.jsx)("td",{rowspan:"2",children:"DELETE FROM users WHERE age=27"}),(0,n.jsx)("td",{rowspan:"2",children:"db.users.remove({age: 27})"})]}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{children:"User.where({age: 27}).delete()"})}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:"User.delete()"}),(0,n.jsx)("td",{children:"DELETE FROM users"}),(0,n.jsx)("td",{children:"db.users.remove()"})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,d.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},1151:(e,s,r)=>{r.d(s,{Z:()=>c,a:()=>t});var n=r(7294);const d={},i=n.createContext(d);function t(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);